{"name":"js-data-schema","tagline":"Define and validate rules, datatypes and schemata in Node and in the browser.","body":"## js-data-schema\r\n\r\n__Define and validate rules, datatypes and schemata in Node and in the browser.__\r\n\r\n## Install\r\n\r\n#### Node\r\n`npm install --save js-data-schema`\r\n\r\n```js\r\nvar Schemator = require('js-data-schema');\r\n```\r\n\r\n#### Browser\r\n`npm install --save js-data-schema` or `bower install --save js-data-schema`\r\n\r\nLoad `js-data-schema/dist/js-data-schema.js` into your browser.\r\n\r\n```js\r\n// global constructor if you're not using AMD or CommonJS\r\nwindow.Schemator;\r\n\r\n// AMD\r\ndefine(['js-data-schema'], function (Schemator) { ... })\r\n\r\n// CommonJS\r\nvar Schemator = require('js-data-schema');\r\n```\r\n\r\n## Getting Started\r\n\r\n```js\r\nvar schemator = new Schemator();\r\n\r\nschemator.defineSchema('Person', {\r\n  name: 'string'\r\n});\r\n\r\nvar errors = schemator.validateSync('Person', { name: 'John' });\r\n\r\nerrors; // null\r\n\r\nerrors = schemator.validateSync('Person', { name: 50043 });\r\n\r\nerrors; // {\r\n              rule: 'type',\r\n              actual: 'number',\r\n              expected: 'string'\r\n            }\r\n```\r\n\r\n## Status\r\n\r\n| Branch | Master |\r\n| ------ | ------ |\r\n| Bower | [![Bower version](https://badge.fury.io/bo/js-data-schema.png)](http://badge.fury.io/bo/js-data-schema) |\r\n| NPM | [![NPM version](https://badge.fury.io/js/js-data-schema.png)](http://badge.fury.io/js/js-data-schema) |\r\n| Build Status | [![Build Status](https://travis-ci.org/js-data/js-data-schema.png?branch=master)](https://travis-ci.org/js-data/js-data-schema) |\r\n| Code Climate | [![Code Climate](https://codeclimate.com/github/js-data/js-data-schema.png)](https://codeclimate.com/github/js-data/js-data-schema) |\r\n| Dependency Status | [![Dependency Status](https://gemnasium.com/js-data/js-data-schema.png)](https://gemnasium.com/js-data/js-data-schema) |\r\n| Coverage | [![Coverage Status](https://coveralls.io/repos/js-data/js-data-schema/badge.png?branch=master)](https://coveralls.io/r/js-data/js-data-schema?branch=master) |\r\n\r\n## API\r\n\r\n### Schemator\r\n\r\n#### Schemator()\r\n```js\r\nvar schemator = new Schemator();\r\n```\r\n\r\n#### Schemator#availableDataTypes()\r\n```js\r\nschemator.availableDataTypes(); // ['boolean', 'string', 'etc.']\r\n```\r\n\r\n#### Schemator#availableRules()\r\n```js\r\nschemator.availableRules(); // ['type', 'minLength', 'etc.']\r\n```\r\n\r\n#### Schemator#availableSchemata()\r\n```js\r\nschemator.defineSchema('PersonSchema', { ... });\r\nschemator.availableSchemata(); // ['PersonSchema']\r\n```\r\n\r\n#### Schemator#getDataType(name)\r\n```js\r\nschemator.getDataType('myDataType');\r\n```\r\n\r\n#### Schemator#getRule(name)\r\n```js\r\nschemator.getRule('myRule');\r\n```\r\n\r\n#### Schemator#getSchema(name)\r\n```js\r\nschemator.getSchema('PersonSchema');\r\n```\r\n\r\n#### Schemator#removeDataType(name)\r\n```js\r\nschemator.removeDataType('myDataType');\r\n```\r\n\r\n#### Schemator#removeRule(name)\r\n```js\r\nschemator.removeRule('myRule');\r\n```\r\n\r\n#### Schemator#removeSchema(name)\r\n```js\r\nschemator.removeSchema('PersonSchema');\r\n```\r\n\r\n#### Schemator#defineDataType(name, typeDefinition)\r\n```js\r\nschemator.defineDataType('NaN', function (x) {\r\n  if (isNaN(x)) {\r\n    return null;\r\n  } else {\r\n    return {\r\n      rule: 'type',\r\n      actual: typeof x,\r\n      expected: 'NaN'\r\n    };\r\n  }\r\n});\r\n```\r\n\r\n#### Schemator#defineRule(name, ruleFunc[, async])\r\n```js\r\nschemator.defineRule('divisibleBy', function (x, divisor) {\r\n  if (typeof x === 'number' && typeof divisor === 'number' && x % divisor !== 0) {\r\n    return {\r\n      rule: 'divisibleBy',\r\n      actual: '' + x + ' % ' + divisor + ' === ' + (x % divisor),\r\n      expected: '' + x + ' % ' + divisor + ' === 0'\r\n    };\r\n  }\r\n  return null;\r\n});\r\n\r\nschemator.defineSchema('mySchema', {\r\n  seats: {\r\n    divisibleBy: 4\r\n  }\r\n});\r\n\r\nvar errors = schemator.getSchema('mySchema').validateSync({\r\n  seats: 16\r\n});\r\n\r\nerrors; //  null\r\n\r\nerrors = schemator.getSchema('mySchema').validateSync({\r\n  seats: 17\r\n});\r\n\r\nerrors; //  {\r\n        //    seats: {\r\n        //      errors: [ {\r\n        //        rule: 'divisibleBy',\r\n        //        actual: '17 % 4 === 1',\r\n        //        expected: '17 % 4 === 0'\r\n        //      } ]\r\n        //    }\r\n        //  }\r\n```\r\n\r\nAsynchronous rule:\r\n```js\r\nschemator.defineRule('divisibleBy', function (x, divisor, cb) {\r\n  \r\n  // asynchronity here is fake, but you could do something async, like make an http request\r\n  setTimeout(function () {\r\n    if (typeof x === 'number' && typeof divisor === 'number' && x % divisor !== 0) {\r\n      cb({\r\n        rule: 'divisibleBy',\r\n        actual: '' + x + ' % ' + divisor + ' === ' + (x % divisor),\r\n        expected: '' + x + ' % ' + divisor + ' === 0'\r\n      });\r\n    }\r\n    cb(null);\r\n  }, 1);\r\n}, true); // pass true as the third argument\r\n\r\nschemator.defineSchema('mySchema', {\r\n  seats: {\r\n    divisibleBy: 4\r\n  }\r\n});\r\n\r\nvar errors = schemator.getSchema('mySchema').validate({\r\n  seats: 16\r\n}, function (err) {\r\n  errors; //  null\r\n\r\n  errors = schemator.getSchema('mySchema').validate({\r\n    seats: 17\r\n  }, function (err) {\r\n    errors; //  {\r\n            //    seats: {\r\n            //      errors: [ {\r\n            //        rule: 'divisibleBy',\r\n            //        actual: '17 % 4 === 1',\r\n            //        expected: '17 % 4 === 0'\r\n            //      } ]\r\n            //    }\r\n            //  }  \r\n  });\r\n});\r\n```\r\n\r\n#### Schemator#defineSchema(name, definition)\r\n```js\r\nschemator.defineSchema('PersonSchema', {\r\n  name: {\r\n    first: {\r\n      type: 'string',\r\n      maxLength: 255\r\n    },\r\n    last: {\r\n      type: 'string',\r\n      maxLength: 255\r\n    }\r\n  },\r\n  age: {\r\n    type: 'number',\r\n    max: 150,\r\n    min: 0\r\n  }\r\n});\r\n```\r\n\r\n#### Schemator#validate(schemaName, attrs[, options], cb)\r\nSee `Schema#validate(attrs[, options], cb)`\r\n\r\n#### Schemator#validateSync(schemaName, attrs[, options])\r\nSee `Schema#validateSync(attrs[, options])`\r\n\r\n#### Schemator#setDefaults(schemaName, attrs)\r\nSee `Schema#setDefaults(attrs)`\r\n\r\n#### Schemator#getDefaults()\r\nSee `Schema#getDefaults()`\r\n\r\n#### Schemator#addDefaultsToTarget(schemaName, target[, overwrite])\r\nSee `Schema#addDefaultsToTarget(target)`\r\n\r\n#### Schemator#stripNonSchemaAttrs(schemaName, target)\r\nSee `Schema#stripNonSchemaAttrs(target)`\r\n\r\n### Schema\r\n\r\n#### Schema#validate(attrs[, options], cb)\r\n```js\r\nPersonSchema.validate({\r\n  name: 'John Anderson'\r\n}, function (err) {\r\n  err; // null\r\n});\r\n\r\nPersonSchema.validate({\r\n  name: 5\r\n}, function (err) {\r\n  err;  //  {\r\n        //    name: {\r\n        //      errors: [{\r\n        //        rule: 'type',\r\n        //        actual: 'number',\r\n        //        expected: 'string'\r\n        //      }]\r\n        //    }\r\n        //  }\r\n});\r\n```\r\n\r\n#### Schema#validateSync(attrs[, options])\r\n```js\r\nvar errors = PersonSchema.validate({\r\n  name: 'John Anderson'\r\n});\r\n\r\nerrors; // null\r\n\r\nerrors = mySchema.validate({\r\n  name: 5\r\n});\r\nerrors; //  {\r\n        //    name: {\r\n        //      errors: [{\r\n        //        rule: 'type',\r\n        //        actual: 'number',\r\n        //        expected: 'string'\r\n        //      }]\r\n        //    }\r\n        //  }\r\n```\r\n\r\n#### Schema#setDefaults(attrs)\r\n```js\r\nPersonSchema.setDefaults({\r\n  first: '',\r\n  last: '',\r\n  plan: 'free'\r\n});\r\n```\r\n\r\n#### Schema#getDefaults()\r\n```js\r\nPersonSchema.getDefaults(); // {\r\n                                 first: '',\r\n                                 last: '',\r\n                                 age: 0\r\n                               }\r\n```\r\n\r\n#### Schema#addDefaultsToTarget(target[, overwrite])\r\n```js\r\nvar person = {\r\n  first: 'John',\r\n  plan: 'premium'\r\n};\r\n\r\nPersonSchema.addDefaultsToTarget(person);\r\n \r\nperson; // {\r\n             first: 'John',\r\n             last: '',\r\n             plan: 'premium'\r\n           }\r\n\r\nPersonSchema.addDefaultsToTarget(person, true);\r\n \r\nperson; // {\r\n             first: '',\r\n             last: '',\r\n             plan: 'free'\r\n           }\r\n```\r\n\r\n#### Schema#stripNonSchemaAttrs(target)\r\n```js\r\nvar person = {\r\n  first: 'John',\r\n  plan: 'premium',\r\n  nonSchema: 'value'\r\n};\r\n\r\nPersonSchema.stripNonSchemaAttrs(person);\r\n \r\nperson; // {\r\n             first: 'John',\r\n             plan: 'premium'\r\n           }\r\n```\r\n\r\n## License\r\n[MIT License](https://github.com/js-data/js-data-schema/blob/master/LICENSE)\r\n\r\nCopyright Â© 2013-2014 Jason Dobry\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\r\nof the Software, and to permit persons to whom the Software is furnished to do\r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}